// tslint:disable
/**
 * AstroPlant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    AggregateMeasurement,
    InlineResponse201,
    Kit,
    KitConfiguration,
    KitConfigurationWithPeripherals,
    NewKit,
    NewKitConfiguration,
    NewPeripheral,
    PatchKit,
    PatchKitConfiguration,
    PatchPeripheral,
    Peripheral,
    Permission,
    ProblemDetails,
    ProblemInternalServer,
    ProblemRateLimit,
} from '../models';

export interface CreateConfigurationRequest {
    kitSerial: string;
    newKitConfiguration: NewKitConfiguration;
}

export interface CreateKitRequest {
    newKit: NewKit;
}

export interface CreatePeripheralRequest {
    configurationId: number;
    newPeripheral: NewPeripheral;
}

export interface DeletePeripheralRequest {
    peripheralId: number;
}

export interface ListAggregateMeasurementsRequest {
    kitSerial: string;
}

export interface ListConfigurationsRequest {
    kitSerial: string;
}

export interface ListKitsRequest {
    after?: number;
}

export interface ListPermissionsRequest {
    kitSerial?: string;
}

export interface PatchConfigurationRequest {
    configurationId: number;
    patchKitConfiguration: PatchKitConfiguration;
}

export interface PatchKitRequest {
    kitSerial: string;
    patchKit: PatchKit;
}

export interface PatchPeripheralRequest {
    peripheralId: number;
    patchPeripheral: PatchPeripheral;
}

export interface ResetPasswordRequest {
    kitSerial: string;
}

export interface ShowKitBySerialRequest {
    kitSerial: string;
}

/**
 * no description
 */
export class KitsApi extends BaseAPI {

    /**
     * Create a new configuration.
     */
    createConfiguration = ({ kitSerial, newKitConfiguration }: CreateConfigurationRequest): Observable<KitConfiguration> => {
        throwIfNullOrUndefined(kitSerial, 'createConfiguration');
        throwIfNullOrUndefined(newKitConfiguration, 'createConfiguration');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<KitConfiguration>({
            path: '/kits/{kitSerial}/configurations'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'POST',
            headers,
            body: newKitConfiguration,
        });
    };

    /**
     * Create a kit.
     */
    createKit = ({ newKit }: CreateKitRequest): Observable<InlineResponse201> => {
        throwIfNullOrUndefined(newKit, 'createKit');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<InlineResponse201>({
            path: '/kits',
            method: 'POST',
            headers,
            body: newKit,
        });
    };

    /**
     * Add a peripheral to the configuration.
     */
    createPeripheral = ({ configurationId, newPeripheral }: CreatePeripheralRequest): Observable<Peripheral> => {
        throwIfNullOrUndefined(configurationId, 'createPeripheral');
        throwIfNullOrUndefined(newPeripheral, 'createPeripheral');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Peripheral>({
            path: '/kit-configurations/{configurationId}/peripherals'.replace('{configurationId}', encodeURI(configurationId)),
            method: 'POST',
            headers,
            body: newPeripheral,
        });
    };

    /**
     * Delete a peripheral.
     */
    deletePeripheral = ({ peripheralId }: DeletePeripheralRequest): Observable<void> => {
        throwIfNullOrUndefined(peripheralId, 'deletePeripheral');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/peripherals/{peripheralId}'.replace('{peripheralId}', encodeURI(peripheralId)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * Aggregate measurements made by a kit in the last 5 days.
     */
    listAggregateMeasurements = ({ kitSerial }: ListAggregateMeasurementsRequest): Observable<Array<AggregateMeasurement>> => {
        throwIfNullOrUndefined(kitSerial, 'listAggregateMeasurements');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<AggregateMeasurement>>({
            path: '/kits/{kitSerial}/aggregate-measurements'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'GET',
            headers,
        });
    };

    /**
     * The configurations of the specified kit.
     */
    listConfigurations = ({ kitSerial }: ListConfigurationsRequest): Observable<Array<KitConfigurationWithPeripherals>> => {
        throwIfNullOrUndefined(kitSerial, 'listConfigurations');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<KitConfigurationWithPeripherals>>({
            path: '/kits/{kitSerial}/configurations'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'GET',
            headers,
        });
    };

    /**
     * List all kits set to be shown on the public map.
     */
    listKits = ({ after }: ListKitsRequest): Observable<Array<Kit>> => {

        const query: HttpQuery = {};

        if (after != null) { query['after'] = after; }

        return this.request<Array<Kit>>({
            path: '/kits',
            method: 'GET',
            query,
        });
    };

    /**
     * List all actions you are permitted to perform on the specified kit.
     */
    listPermissions = ({ kitSerial }: ListPermissionsRequest): Observable<Array<Permission>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (kitSerial != null) { query['kitSerial'] = kitSerial; }

        return this.request<Array<Permission>>({
            path: '/permissions',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * Update the configuration.
     */
    patchConfiguration = ({ configurationId, patchKitConfiguration }: PatchConfigurationRequest): Observable<KitConfiguration> => {
        throwIfNullOrUndefined(configurationId, 'patchConfiguration');
        throwIfNullOrUndefined(patchKitConfiguration, 'patchConfiguration');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<KitConfiguration>({
            path: '/kit-configurations/{configurationId}'.replace('{configurationId}', encodeURI(configurationId)),
            method: 'PATCH',
            headers,
            body: patchKitConfiguration,
        });
    };

    /**
     * Update the kit details.
     */
    patchKit = ({ kitSerial, patchKit }: PatchKitRequest): Observable<Kit> => {
        throwIfNullOrUndefined(kitSerial, 'patchKit');
        throwIfNullOrUndefined(patchKit, 'patchKit');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Kit>({
            path: '/kits/{kitSerial}'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'PATCH',
            headers,
            body: patchKit,
        });
    };

    /**
     * Update a peripheral.
     */
    patchPeripheral = ({ peripheralId, patchPeripheral }: PatchPeripheralRequest): Observable<void> => {
        throwIfNullOrUndefined(peripheralId, 'patchPeripheral');
        throwIfNullOrUndefined(patchPeripheral, 'patchPeripheral');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/peripherals/{peripheralId}'.replace('{peripheralId}', encodeURI(peripheralId)),
            method: 'PATCH',
            headers,
            body: patchPeripheral,
        });
    };

    /**
     * Reset the kit\'s password.
     */
    resetPassword = ({ kitSerial }: ResetPasswordRequest): Observable<string> => {
        throwIfNullOrUndefined(kitSerial, 'resetPassword');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<string>({
            path: '/kits/{kitSerial}/password'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'POST',
            headers,
        });
    };

    /**
     * Info for a specific kit.
     */
    showKitBySerial = ({ kitSerial }: ShowKitBySerialRequest): Observable<Kit> => {
        throwIfNullOrUndefined(kitSerial, 'showKitBySerial');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Kit>({
            path: '/kits/{kitSerial}'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'GET',
            headers,
        });
    };

}
