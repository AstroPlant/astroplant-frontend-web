// tslint:disable
/**
 * AstroPlant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfRequired, encodeURI } from '../runtime';
import {
    InlineResponse201,
    InlineResponse429,
    InlineResponse500,
    Kit,
    KitConfiguration,
    KitConfigurationWithPeripherals,
    NewKit,
    NewKitConfiguration,
    NewPeripheral,
    PatchKitConfiguration,
    Peripheral,
    Permission,
    ProblemDetails,
} from '../models';

export interface CreateConfigurationRequest {
    kitSerial: string;
    newKitConfiguration: NewKitConfiguration;
}

export interface CreateKitRequest {
    newKit: NewKit;
}

export interface CreatePeripheralRequest {
    kitSerial: string;
    configurationId: number;
    newPeripheral: NewPeripheral;
}

export interface ListConfigurationsRequest {
    kitSerial: string;
}

export interface ListKitsRequest {
    after?: number;
}

export interface ListPermissionsRequest {
    kitSerial?: string;
}

export interface PatchConfigurationRequest {
    kitSerial: string;
    configurationId: number;
    patchKitConfiguration: PatchKitConfiguration;
}

export interface ShowKitBySerialRequest {
    kitSerial: string;
}

/**
 * no description
 */
export class KitsApi extends BaseAPI {

    /**
     * Create a new configuration.
     */
    createConfiguration = (requestParameters: CreateConfigurationRequest): Observable<KitConfiguration> => {
        throwIfRequired(requestParameters, 'kitSerial', 'createConfiguration');
        throwIfRequired(requestParameters, 'newKitConfiguration', 'createConfiguration');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        const query: HttpQuery = {
            ...(requestParameters.kitSerial && { 'kitSerial': requestParameters.kitSerial }),
        };

        return this.request<KitConfiguration>({
            path: '/kit-configurations',
            method: 'POST',
            headers,
            query,
            body: requestParameters.newKitConfiguration,
        });
    };

    /**
     * Create a kit.
     */
    createKit = (requestParameters: CreateKitRequest): Observable<InlineResponse201> => {
        throwIfRequired(requestParameters, 'newKit', 'createKit');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        return this.request<InlineResponse201>({
            path: '/kits',
            method: 'POST',
            headers,
            body: requestParameters.newKit,
        });
    };

    /**
     * Add a peripheral to the configuration.
     */
    createPeripheral = (requestParameters: CreatePeripheralRequest): Observable<Peripheral> => {
        throwIfRequired(requestParameters, 'kitSerial', 'createPeripheral');
        throwIfRequired(requestParameters, 'configurationId', 'createPeripheral');
        throwIfRequired(requestParameters, 'newPeripheral', 'createPeripheral');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        const query: HttpQuery = {
            ...(requestParameters.kitSerial && { 'kitSerial': requestParameters.kitSerial }),
        };

        return this.request<Peripheral>({
            path: '/kit-configurations/{configurationId}/peripherals'.replace('{configurationId}', encodeURI(requestParameters.configurationId)),
            method: 'POST',
            headers,
            query,
            body: requestParameters.newPeripheral,
        });
    };

    /**
     * The configurations of the specified kit.
     */
    listConfigurations = (requestParameters: ListConfigurationsRequest): Observable<Array<KitConfigurationWithPeripherals>> => {
        throwIfRequired(requestParameters, 'kitSerial', 'listConfigurations');

        const headers: HttpHeaders = {
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        const query: HttpQuery = {
            ...(requestParameters.kitSerial && { 'kitSerial': requestParameters.kitSerial }),
        };

        return this.request<Array<KitConfigurationWithPeripherals>>({
            path: '/kit-configurations',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * List all public kits.
     */
    listKits = (requestParameters: ListKitsRequest): Observable<Array<Kit>> => {

        const query: HttpQuery = {
            ...(requestParameters.after && { 'after': requestParameters.after }),
        };

        return this.request<Array<Kit>>({
            path: '/kits',
            method: 'GET',
            query,
        });
    };

    /**
     * List all actions you are permitted to perform on the specified kit.
     */
    listPermissions = (requestParameters: ListPermissionsRequest): Observable<Array<Permission>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        const query: HttpQuery = {
            ...(requestParameters.kitSerial && { 'kitSerial': requestParameters.kitSerial }),
        };

        return this.request<Array<Permission>>({
            path: '/permissions',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * Update the configuration.
     */
    patchConfiguration = (requestParameters: PatchConfigurationRequest): Observable<KitConfiguration> => {
        throwIfRequired(requestParameters, 'kitSerial', 'patchConfiguration');
        throwIfRequired(requestParameters, 'configurationId', 'patchConfiguration');
        throwIfRequired(requestParameters, 'patchKitConfiguration', 'patchConfiguration');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        const query: HttpQuery = {
            ...(requestParameters.kitSerial && { 'kitSerial': requestParameters.kitSerial }),
        };

        return this.request<KitConfiguration>({
            path: '/kit-configurations/{configurationId}'.replace('{configurationId}', encodeURI(requestParameters.configurationId)),
            method: 'PATCH',
            headers,
            query,
            body: requestParameters.patchKitConfiguration,
        });
    };

    /**
     * Info for a specific kit.
     */
    showKitBySerial = (requestParameters: ShowKitBySerialRequest): Observable<Kit> => {
        throwIfRequired(requestParameters, 'kitSerial', 'showKitBySerial');

        const headers: HttpHeaders = {
            ...(this.configuration.username && this.configuration.password && { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }),
        };

        return this.request<Kit>({
            path: '/kits/{kitSerial}'.replace('{kitSerial}', encodeURI(requestParameters.kitSerial)),
            method: 'GET',
            headers,
        });
    };

}
