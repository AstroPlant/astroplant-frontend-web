// tslint:disable
/**
 * AstroPlant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ProblemDetails,
    ProblemInternalServer,
    ProblemRateLimit,
} from '../models';

export interface UptimeRequest {
    kitSerial: string;
}

export interface VersionRequest {
    kitSerial: string;
}

/**
 * no description
 */
export class KitRpcApi extends BaseAPI {

    /**
     * Query the kit for its uptime.
     */
    uptime = ({ kitSerial }: UptimeRequest): Observable<number> => {
        throwIfNullOrUndefined(kitSerial, 'uptime');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<number>({
            path: '/kit-rpc/{kitSerial}/uptime'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Query the kit for the version it is running.
     */
    version = ({ kitSerial }: VersionRequest): Observable<string> => {
        throwIfNullOrUndefined(kitSerial, 'version');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<string>({
            path: '/kit-rpc/{kitSerial}/version'.replace('{kitSerial}', encodeURI(kitSerial)),
            method: 'GET',
            headers,
        });
    };

}
