// tslint:disable
/**
 * AstroPlant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    KitMembership,
    NewUser,
    ProblemInternalServer,
    ProblemInvalidParameters,
    ProblemRateLimit,
    User,
} from '../models';

export interface CreateUserRequest {
    newUser: NewUser;
}

export interface ShowUserByUsernameRequest {
    username: string;
}

export interface ShowUserKitMembershipsRequest {
    username: string;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {

    /**
     * Create a user.
     */
    createUser = ({ newUser }: CreateUserRequest): Observable<void> => {
        throwIfNullOrUndefined(newUser, 'createUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/users',
            method: 'POST',
            headers,
            body: newUser,
        });
    };

    /**
     * Get the user\'s details.
     */
    showUserByUsername = ({ username }: ShowUserByUsernameRequest): Observable<User> => {
        throwIfNullOrUndefined(username, 'showUserByUsername');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            path: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Get a user\'s kit memberships.
     */
    showUserKitMemberships = ({ username }: ShowUserKitMembershipsRequest): Observable<Array<KitMembership>> => {
        throwIfNullOrUndefined(username, 'showUserKitMemberships');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<KitMembership>>({
            path: '/users/{username}/kit-memberships'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        });
    };

}
