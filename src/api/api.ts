// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * AstroPlant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticationTokens
 */
export interface AuthenticationTokens {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationTokens
     */
    refreshToken: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationTokens
     */
    authenticationToken: string;
}
/**
 * 
 * @export
 * @interface FullUser
 */
export interface FullUser {
    /**
     * 
     * @type {number}
     * @memberof FullUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    emailAddress: string;
    /**
     * 
     * @type {boolean}
     * @memberof FullUser
     */
    useEmailAddressForGravatar: boolean;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    gravatarAlternative: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    longitude?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject
     */
    privacyPublicDashboard: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject
     */
    privacyShowOnMap: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    emailAddress: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    refreshToken: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    kitSerial: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineResponse429
 */
export interface InlineResponse429 {
    /**
     * The error code for rate limit errors: 2
     * @type {number}
     * @memberof InlineResponse429
     */
    errorCode?: number;
    /**
     * The error name for rate limit errors: rateLimit
     * @type {string}
     * @memberof InlineResponse429
     */
    errorName?: string;
    /**
     * 
     * @type {InlineResponse429ErrorValue}
     * @memberof InlineResponse429
     */
    errorValue?: InlineResponse429ErrorValue;
}
/**
 * 
 * @export
 * @interface InlineResponse429ErrorValue
 */
export interface InlineResponse429ErrorValue {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse429ErrorValue
     */
    waitTimeMillis?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export interface InlineResponse500 {
    /**
     * The error code for internal server errors: 1
     * @type {number}
     * @memberof InlineResponse500
     */
    errorCode?: number;
    /**
     * The error name for internal server errors: internalServer
     * @type {string}
     * @memberof InlineResponse500
     */
    errorName?: string;
}
/**
 * 
 * @export
 * @interface Kit
 */
export interface Kit {
    /**
     * 
     * @type {number}
     * @memberof Kit
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Kit
     */
    serial: string;
    /**
     * 
     * @type {string}
     * @memberof Kit
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Kit
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Kit
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Kit
     */
    longitude?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Kit
     */
    privacyPublicDashboard?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Kit
     */
    privacyShowOnMap?: boolean;
}
/**
 * 
 * @export
 * @interface KitMembership
 */
export interface KitMembership {
    /**
     * 
     * @type {number}
     * @memberof KitMembership
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof KitMembership
     */
    user: number;
    /**
     * 
     * @type {Kit}
     * @memberof KitMembership
     */
    kit: Kit;
    /**
     * 
     * @type {boolean}
     * @memberof KitMembership
     */
    accessConfigure: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof KitMembership
     */
    accessSuper: boolean;
    /**
     * 
     * @type {Date}
     * @memberof KitMembership
     */
    datetimeLinked: Date;
}
/**
 * A basic problem report, conforming to RFC7807. Most problems will provide additional fields with information.
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string;
}

/**
 * AuthenticateApi - axios parameter creator
 * @export
 */
export const AuthenticateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate yourself by username and password.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateByCredentials(inlineObject2: InlineObject2, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject2' is not null or undefined
            if (inlineObject2 === null || inlineObject2 === undefined) {
                throw new RequiredError('inlineObject2','Required parameter inlineObject2 was null or undefined when calling authenticateByCredentials.');
            }
            const localVarPath = `/me/auth`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"InlineObject2" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain an authentication token from a refresh token.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainAuthenticationTokenFromRefreshToken(inlineObject3: InlineObject3, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject3' is not null or undefined
            if (inlineObject3 === null || inlineObject3 === undefined) {
                throw new RequiredError('inlineObject3','Required parameter inlineObject3 was null or undefined when calling obtainAuthenticationTokenFromRefreshToken.');
            }
            const localVarPath = `/me/refresh`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"InlineObject3" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticateApi - functional programming interface
 * @export
 */
export const AuthenticateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate yourself by username and password.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateByCredentials(inlineObject2: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationTokens> {
            const localVarAxiosArgs = AuthenticateApiAxiosParamCreator(configuration).authenticateByCredentials(inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Obtain an authentication token from a refresh token.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainAuthenticationTokenFromRefreshToken(inlineObject3: InlineObject3, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AuthenticateApiAxiosParamCreator(configuration).obtainAuthenticationTokenFromRefreshToken(inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticateApi - factory interface
 * @export
 */
export const AuthenticateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Authenticate yourself by username and password.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateByCredentials(inlineObject2: InlineObject2, options?: any) {
            return AuthenticateApiFp(configuration).authenticateByCredentials(inlineObject2, options)(axios, basePath);
        },
        /**
         * 
         * @summary Obtain an authentication token from a refresh token.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainAuthenticationTokenFromRefreshToken(inlineObject3: InlineObject3, options?: any) {
            return AuthenticateApiFp(configuration).obtainAuthenticationTokenFromRefreshToken(inlineObject3, options)(axios, basePath);
        },
    };
};

/**
 * AuthenticateApi - object-oriented interface
 * @export
 * @class AuthenticateApi
 * @extends {BaseAPI}
 */
export class AuthenticateApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate yourself by username and password.
     * @param {InlineObject2} inlineObject2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public authenticateByCredentials(inlineObject2: InlineObject2, options?: any) {
        return AuthenticateApiFp(this.configuration).authenticateByCredentials(inlineObject2, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Obtain an authentication token from a refresh token.
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public obtainAuthenticationTokenFromRefreshToken(inlineObject3: InlineObject3, options?: any) {
        return AuthenticateApiFp(this.configuration).obtainAuthenticationTokenFromRefreshToken(inlineObject3, options)(this.axios, this.basePath);
    }

}


/**
 * KitsApi - axios parameter creator
 * @export
 */
export const KitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a kit.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKit(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling createKit.');
            }
            const localVarPath = `/kits`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"InlineObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all public kits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKits(options: any = {}): RequestArgs {
            const localVarPath = `/kits`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific kit.
         * @param {string} kitId The id of the kit to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showKitById(kitId: string, options: any = {}): RequestArgs {
            // verify required parameter 'kitId' is not null or undefined
            if (kitId === null || kitId === undefined) {
                throw new RequiredError('kitId','Required parameter kitId was null or undefined when calling showKitById.');
            }
            const localVarPath = `/kits/{kitId}`
                .replace(`{${"kitId"}}`, encodeURIComponent(String(kitId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KitsApi - functional programming interface
 * @export
 */
export const KitsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a kit.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKit(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = KitsApiAxiosParamCreator(configuration).createKit(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List all public kits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKits(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Kit>> {
            const localVarAxiosArgs = KitsApiAxiosParamCreator(configuration).listKits(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Info for a specific kit.
         * @param {string} kitId The id of the kit to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showKitById(kitId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kit> {
            const localVarAxiosArgs = KitsApiAxiosParamCreator(configuration).showKitById(kitId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KitsApi - factory interface
 * @export
 */
export const KitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a kit.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKit(inlineObject: InlineObject, options?: any) {
            return KitsApiFp(configuration).createKit(inlineObject, options)(axios, basePath);
        },
        /**
         * 
         * @summary List all public kits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKits(options?: any) {
            return KitsApiFp(configuration).listKits(options)(axios, basePath);
        },
        /**
         * 
         * @summary Info for a specific kit.
         * @param {string} kitId The id of the kit to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showKitById(kitId: string, options?: any) {
            return KitsApiFp(configuration).showKitById(kitId, options)(axios, basePath);
        },
    };
};

/**
 * KitsApi - object-oriented interface
 * @export
 * @class KitsApi
 * @extends {BaseAPI}
 */
export class KitsApi extends BaseAPI {
    /**
     * 
     * @summary Create a kit.
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KitsApi
     */
    public createKit(inlineObject: InlineObject, options?: any) {
        return KitsApiFp(this.configuration).createKit(inlineObject, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List all public kits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KitsApi
     */
    public listKits(options?: any) {
        return KitsApiFp(this.configuration).listKits(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Info for a specific kit.
     * @param {string} kitId The id of the kit to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KitsApi
     */
    public showKitById(kitId: string, options?: any) {
        return KitsApiFp(this.configuration).showKitById(kitId, options)(this.axios, this.basePath);
    }

}


/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options: any = {}): RequestArgs {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your kit memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMyKitMemberships(options: any = {}): RequestArgs {
            const localVarPath = `/me/memberships`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullUser> {
            const localVarAxiosArgs = MeApiAxiosParamCreator(configuration).showMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Your kit memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMyKitMemberships(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KitMembership>> {
            const localVarAxiosArgs = MeApiAxiosParamCreator(configuration).showMyKitMemberships(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options?: any) {
            return MeApiFp(configuration).showMe(options)(axios, basePath);
        },
        /**
         * 
         * @summary Your kit memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMyKitMemberships(options?: any) {
            return MeApiFp(configuration).showMyKitMemberships(options)(axios, basePath);
        },
    };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
    /**
     * 
     * @summary Your user information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public showMe(options?: any) {
        return MeApiFp(this.configuration).showMe(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Your kit memberships.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public showMyKitMemberships(options?: any) {
        return MeApiFp(this.configuration).showMyKitMemberships(options)(this.axios, this.basePath);
    }

}


/**
 * ServerApi - axios parameter creator
 * @export
 */
export const ServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the current server time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeGet(options: any = {}): RequestArgs {
            const localVarPath = `/time`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grab the version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options: any = {}): RequestArgs {
            const localVarPath = `/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerApi - functional programming interface
 * @export
 */
export const ServerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the current server time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Date> {
            const localVarAxiosArgs = ServerApiAxiosParamCreator(configuration).timeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Grab the version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ServerApiAxiosParamCreator(configuration).versionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ServerApi - factory interface
 * @export
 */
export const ServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get the current server time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeGet(options?: any) {
            return ServerApiFp(configuration).timeGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary Grab the version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any) {
            return ServerApiFp(configuration).versionGet(options)(axios, basePath);
        },
    };
};

/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export class ServerApi extends BaseAPI {
    /**
     * 
     * @summary Get the current server time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public timeGet(options?: any) {
        return ServerApiFp(this.configuration).timeGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Grab the version of the API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public versionGet(options?: any) {
        return ServerApiFp(this.configuration).versionGet(options)(this.axios, this.basePath);
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(inlineObject1: InlineObject1, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject1' is not null or undefined
            if (inlineObject1 === null || inlineObject1 === undefined) {
                throw new RequiredError('inlineObject1','Required parameter inlineObject1 was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"InlineObject1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options: any = {}): RequestArgs {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(inlineObject1: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).createUser(inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullUser> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).showMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a user.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(inlineObject1: InlineObject1, options?: any) {
            return UserApiFp(configuration).createUser(inlineObject1, options)(axios, basePath);
        },
        /**
         * 
         * @summary Your user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMe(options?: any) {
            return UserApiFp(configuration).showMe(options)(axios, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create a user.
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(inlineObject1: InlineObject1, options?: any) {
        return UserApiFp(this.configuration).createUser(inlineObject1, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Your user information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public showMe(options?: any) {
        return UserApiFp(this.configuration).showMe(options)(this.axios, this.basePath);
    }

}


