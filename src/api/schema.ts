/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    /**
     * A basic problem report, conforming to RFC7807. Most problems will provide additional fields with information.
     */
    ProblemDetails: {
      type?: string;
      title?: string;
      status?: number;
      detail?: string;
    };
    ProblemInternalServer: {
      /**
       * The error code for internal server errors: 1
       */
      errorCode?: number;
      /**
       * The error name for internal server errors: internalServer
       */
      errorName?: string;
    };
    ProblemRateLimit: {
      /**
       * The error code for rate limit errors: 2
       */
      errorCode?: number;
      /**
       * The error name for rate limit errors: rateLimit
       */
      errorName?: string;
      errorValue?: { waitTimeMillis?: number };
    };
    ProblemInvalidParameters: components["schemas"]["ProblemDetails"] & {
      invalidParameters?: { [key: string]: components["schemas"]["ProblemInvalidParameters"] };
    };
    InvalidParameter: (Partial<
      "mustBeEmailAddress" | "mustBeUrl" | "alreadyExists" | "other"
    > &
      Partial<{ mustBeInRange: { min: number; max: number } }> &
      Partial<{
        mustHaveLengthBetween: Partial<{ [key: string]: any }> &
          Partial<{ [key: string]: any }>;
      }> &
      Partial<{ mustHaveLengthExactly: { length: number } }> &
      Partial<{
        invalidToken: { category: "missing" | "malformed" | "expired" };
      }>)[];
    Kit: {
      id: number;
      serial: string;
      name: string;
      description?: string;
      latitude?: number;
      longitude?: number;
      privacyPublicDashboard?: boolean;
      privacyShowOnMap?: boolean;
    };
    PatchKit: {
      name?: string;
      description?: string;
      latitude?: number;
      longitude?: number;
      privacyPublicDashboard?: boolean;
      privacyShowOnMap?: boolean;
    };
    NewKit: {
      name?: string;
      description?: string;
      latitude?: number;
      longitude?: number;
      privacyPublicDashboard: boolean;
      privacyShowOnMap: boolean;
    };
    Kits: components["schemas"]["Kit"][];
    KitMembership: {
      id: number;
      user: string;
      kit: components["schemas"]["Kit"];
      accessConfigure: boolean;
      accessSuper: boolean;
      datetimeLinked: string;
    };
    NewUser: { username: string; password: string; emailAddress: string };
    AuthUser: { username: string; password: string };
    FullUser: {
      id: number;
      username: string;
      displayName: string;
      emailAddress: string;
      useEmailAddressForGravatar: boolean;
      gravatarAlternative: string;
    };
    User: { username: string; displayName: string; gravatar: string };
    AuthRefreshToken: { refreshToken: string };
    AuthenticationTokens: { refreshToken: string; accessToken: string };
    PeripheralDefinition: {
      id: number;
      name: string;
      description?: string;
      brand?: string;
      model?: string;
      moduleName: string;
      className: string;
      configurationSchema: { [key: string]: any };
      commandSchema: { [key: string]: any } | null;
      expectedQuantityTypes?: number[];
    };
    PeripheralDefinitions: components["schemas"]["PeripheralDefinition"][];
    ExpectedQuantityType: {
      id: number;
      peripheralDefinition: number;
      quantityType: number;
    };
    Peripheral: {
      id: number;
      kitId: number;
      configurationId: number;
      peripheralDefinitionId: number;
      name: string;
      configuration: { [key: string]: any };
    };
    NewPeripheral: {
      peripheralDefinitionId: number;
      name: string;
      configuration: { [key: string]: any };
    };
    PatchPeripheral: { name?: string; configuration?: { [key: string]: any } };
    Peripherals: components["schemas"]["Peripheral"][];
    QuantityType: {
      id: number;
      physicalQuantity: string;
      physicalUnit: string;
      physicalUnitSymbol?: string;
    };
    QuantityTypes: components["schemas"]["QuantityType"][];
    Permission:
      | "view"
      | "subscribeRealTimeMeasurements"
      | "editDetails"
      | "editConfiguration"
      | "editMembers"
      | "setSuperMember";
    Permissions: components["schemas"]["Permission"][];
    KitConfiguration: {
      id: number;
      kitId: number;
      description?: string;
      rulesSupervisorModuleName: string;
      rulesSupervisorClassName: string;
      rules: { [key: string]: any };
      active: boolean;
      neverUsed: boolean;
    };
    NewKitConfiguration: { description?: string };
    PatchKitConfiguration: {
      description?: string;
      rulesSupervisorModuleName?: string;
      rulesSupervisorClassName?: string;
      rules?: { [key: string]: any };
      active?: boolean;
    };
    KitConfigurationWithPeripherals: components["schemas"]["KitConfiguration"] & {
      peripherals: components["schemas"]["Peripherals"];
    };
    AggregateMeasurement: {
      id: string;
      peripheralId: number;
      kitId: number;
      kitConfigurationId: number;
      quantityTypeId: number;
      aggregateType: string;
      value: number;
      datetimeStart: string;
      datetimeEnd: string;
    };
  };
}
